class Pgbouncer < Formula
  desc "Lightweight connection pooler for PostgreSQL"
  homepage "https://www.pgbouncer.org/"
  url "https://www.pgbouncer.org/downloads/files/1.14.0/pgbouncer-1.14.0.tar.gz"
  sha256 "a0c13d10148f557e36ff7ed31793abb7a49e1f8b09aa2d4695d1c28fa101fee7"
  revision 1

  depends_on "pkg-config" => :build
  depends_on "libevent"
  depends_on "openssl@1.1"

  # This patch allows for longer passwords, such as the ones generated by AWS
  # IAM authentication.  Upstream issue is pgbouncer/pgbouncer#430, remove
  # this patch after that is merged.
  patch :DATA

  def install
    system "./configure", "--disable-debug",
                          "--prefix=#{prefix}"
    system "make", "install"
    bin.install "etc/mkauth.py"
    inreplace "etc/pgbouncer.ini" do |s|
      s.gsub! /logfile = .*/, "logfile = #{var}/log/pgbouncer.log"
      s.gsub! /pidfile = .*/, "pidfile = #{var}/run/pgbouncer.pid"
      s.gsub! /auth_file = .*/, "auth_file = #{etc}/userlist.txt"
    end
    etc.install %w[etc/pgbouncer.ini etc/userlist.txt]
  end

  def caveats
    <<~EOS
      The config file: #{etc}/pgbouncer.ini is in the "ini" format and you
      will need to edit it for your particular setup. See:
      https://pgbouncer.github.io/config.html

      The auth_file option should point to the #{etc}/userlist.txt file which
      can be populated by the #{bin}/mkauth.py script.
    EOS
  end

  plist_options manual: "pgbouncer -q #{HOMEBREW_PREFIX}/etc/pgbouncer.ini"

  def plist
    <<~EOS
      <?xml version="1.0" encoding="UTF-8"?>
      <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
      <plist version="1.0">
      <dict>
        <key>KeepAlive</key>
        <true/>
        <key>Label</key>
        <string>#{plist_name}</string>
        <key>ProgramArguments</key>
        <array>
          <string>#{opt_bin}/pgbouncer</string>
          <string>-q</string>
          <string>#{etc}/pgbouncer.ini</string>
        </array>
        <key>RunAtLoad</key>
        <true/>
        <key>WorkingDirectory</key>
        <string>#{HOMEBREW_PREFIX}</string>
      </dict>
      </plist>
    EOS
  end

  test do
    assert_match version.to_s, shell_output("#{bin}/pgbouncer -V")
  end
end

__END__
From 28fbc7258900d0c3872b4a0757382dff3a1bef14 Mon Sep 17 00:00:00 2001
From: Will Jones <will@sacharissa.co.uk>
Date: Fri, 25 Oct 2019 08:59:33 +0100
Subject: [PATCH] Increase maximum password length from 160 to 1024

While a maximum length of 160 bytes is acceptable for most applications,
temporary credentials generated by some cloud providers (e.g. AWS when
using IAM roles to access RDS databases) greatly exceed this size,
hitting around 800--900 bytes. This commit extends the maximum password
length and related static buffer sizes to accommodate these use cases.
---
 doc/config.md     | 2 +-
 include/bouncer.h | 8 ++++++--
 include/pktbuf.h  | 2 +-
 3 files changed, 8 insertions(+), 4 deletions(-)

diff --git a/doc/config.md b/doc/config.md
index 747e376..6c6a4b7 100644
--- a/doc/config.md
+++ b/doc/config.md
@@ -856,7 +856,7 @@ user name, meaning that there will be one pool per user.
 
 ### password
 
-The length for `password` is limited to 160 characters maximum.
+The length for `password` is limited to 1024 characters maximum.
 
 If no password is specified here, the password from the `auth_file` or
 `auth_query` will be used.
diff --git a/include/bouncer.h b/include/bouncer.h
index 45795e0..2e71edb 100644
--- a/include/bouncer.h
+++ b/include/bouncer.h
@@ -110,8 +110,12 @@ extern int cf_sbuf_len;
 /* to avoid allocations will use static buffers */
 #define MAX_DBNAME	64
 #define MAX_USERNAME	64
-/* typical SCRAM-SHA-256 verifier takes at least 133 bytes */
-#define MAX_PASSWORD	160
+/*
+ * while a typical SCRAM-SHA-256 verifier takes at least 133 bytes,
+ * temporary credentials generated by some cloud database providers
+ * (e.g. AWS) may be as long as 800--900 bytes.
+ */
+#define MAX_PASSWORD	1024
 
 /*
  * AUTH_* symbols are used for both protocol handling and
diff --git a/include/pktbuf.h b/include/pktbuf.h
index b73de1b..7d129d3 100644
--- a/include/pktbuf.h
+++ b/include/pktbuf.h
@@ -150,7 +150,7 @@ void pktbuf_write_ExtQuery(PktBuf *buf, const char *query, int nargs, ...);
 	SEND_wrap(16, pktbuf_write_CancelRequest, res, sk, key)
 
 #define SEND_PasswordMessage(res, sk, psw) \
-	SEND_wrap(512, pktbuf_write_PasswordMessage, res, sk, psw)
+	SEND_wrap(2048, pktbuf_write_PasswordMessage, res, sk, psw)
 
 #define SEND_SASLInitialResponseMessage(res, sk, mech, cir) \
 	SEND_wrap(512, pkgbuf_write_SASLInitialResponseMessage, res, sk, mech, cir)
-- 
2.28.0

